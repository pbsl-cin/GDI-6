# USE ✓
# FIND ✓
# SIZE ✓
# AGGREGATE ✓
# MATCH ✓
# PROJECT ✓
# GTE ✓
# GROUP 
# SUM
# COUNT (COUNTDOCUMENTS) ✓
# MAX
# AVG ✓
# EXISTS
# SORT ✓
# LIMIT ✓
# $WHERE ✓
# MAPREDUCE
# FUNCTION ✓
# PRETTY ✓
# ALL
# SET 
# TEXT
# SEARCH
# FILTER ✓
# UPDATE (UPDATEONE/UPDATEMANY)
# SAVE (UPDATEONE/INSERTONE)
# RENAMECOLLECTION
# COND ✓
# LOOKUP
# FINDONE
# ADDTOSET

# Seleciona o banco de dados
use escola-idiomas

# Consulta o nome dos estudantes que estão aprendendo espanhol, assim como o seu progresso no idioma e o número da última atividade concluída
db.alunos.find({"cursos.idioma":"espanhol"}, {_id:false, "nome":true, "cursos.$":true})

# Consulta a idade média dos estudantes de japonês >>>>>>>>>>> DESATUALIZADO <<<<<<<<<<<
db.students.aggregate([{$match:{"learning.Japanese":{$exists: true}}}, {$group:{_id:null, "Average japanese student age":{$avg:"$age"}}}])

# Consulta o nome e o progresso atual dos 5 estudantes de inglês mais avançados no idioma ordenados de maneira decrescente
db.alunos.aggregate([{$match:{"cursos.idioma":"inglês"}},{$project:{_id:false, nome:true, cursos:{$filter:{input:"$cursos", as:"curso", cond:{$eq:["$$curso.idioma","inglês"]}}}}},{$unwind:"$cursos"},{$sort:{"cursos.progresso":-1}},{$limit:5}])

# Consulta quantos alunos já concluíram ao menos 50% de algum dos cursos disponíveis
db.alunos.find({"cursos.progresso":{$gte:0.5}}, {_id:false, nome:true, "cursos.$":true}).count()

# -> A consulta cria um índice de texto no campo "descricao" dentro do array "atividades" na coleção "idiomas" e,  em seguida, busca onde pelo menos uma atividade no array "atividades" contenha a palavra "comida" na descrição.

db.idiomas.createIndex({ "atividades.descricao": "text" })
db.idiomas.find({ $text: { $search: "comida" } })


# -> Insere um tema na lista de atividades da lingua ingles 
db.idiomas.updateOne(
    { "lingua": "inglês" },
    {
        $addToSet: {
            "atividades": {
                "tema": "Gírias",
                "descricao": "Aprender gírias em inglês",
                "nivel": "básico",
                "qntd_questoes": 5
            }
        }
    }
)


#-> A primeira condição procura por uma pessoa com o nome "Ana", e a segunda condição procura por um cpf que uma das Ana cadastradas podem ter. Em seguida, são projetados os campos "nome" e "cpf" para serem incluídos no resultado da consulta. 

db.alunos.findOne(
    {
        $and: [
            { "nome": /^Ana/ },
            { "cpf": "222333494-55" }
        ]
    },
    {
        nome: 1,
        cpf: 1
    }
)


# PROJECT - AVG
db.alunos.aggregate([{
  $project: {
    _id:0
    nome: 1,
    cpf:  1,
    mediaProgresso: {
      $avg: "$cursos.progresso"
      },
    }
  }
]);

# PROJECT - SIZE
db.alunos.aggregate([
    {
        $project: {
            _id: '$cpf',
            nome: 1,
            idiomasEmProgresso: { $size: '$cursos' }
       }
    }
 ]);



# CONSULTA USUARIOS QUE ACESSARAM NOS ULTIMOS TRES DIAS
db.alunos.find({
    $where: function() {
        const diasAtras = 3;
        var _data = new Date();
        _data.setDate(_data.getDate() - diasAtras);
        return this.acesso.ultimo.getTime() >= _data.getTime();
    }
}, {
    nome: 1,
    _id: "$cpf",
    "acesso.sequencia": 1,
    "acesso.ultimo": 1,
}).sort({ "acesso.sequencia": -1 });